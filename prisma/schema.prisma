generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model WalletAccount {
  id           String        @id @default(cuid())
  userId       String
  chain        String        @db.VarChar(50)
  address      String        @db.VarChar(255)
  privateKey   String        @db.Text
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  balances     WalletBalance[]
  transactions WalletTransaction[]

  @@index([userId])
  @@index([chain])
  @@index([address])
  @@map("wallet_accounts")
}

model WalletCoin {
  id               String        @id @default(cuid())
  name             String        @db.VarChar(255)
  symbol           String        @db.VarChar(50)
  decimals         Int?
  address          String?       @db.VarChar(255)
  wrappedAddress   String        @db.VarChar(255)
  withdrawFeeInUsd Float
  chain            String        @db.VarChar(50)
  isNative         Boolean       @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  balances         WalletBalance[]
  transactions     WalletTransaction[]

  @@unique([symbol, chain])
  @@index([address])
  @@index([chain])
  @@map("wallet_coins")
}

model WalletTransaction {
  id          String   @id @default(cuid())
  userId      String
  accountId   String
  coinId      String
  type        String
  chain       String
  value       Float
  fromAddress String   @db.VarChar(255)
  toAddress   String   @db.VarChar(255)
  txHash      String   @unique
  blockNumber Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  account     WalletAccount  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  coin        WalletCoin     @relation(fields: [coinId], references: [id], onDelete: Cascade)

  @@index([fromAddress])
  @@index([toAddress])
  @@index([txHash])
  @@index([chain])
  @@index([blockNumber])
  @@index([userId])
  @@index([accountId])
  @@index([coinId])
  @@map("wallet_transactions")
}

model WalletBalance {
  id        String   @id @default(cuid())
  userId    String
  accountId String
  coinId    String
  balance   Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  account   WalletAccount  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  coin      WalletCoin     @relation(fields: [coinId], references: [id], onDelete: Cascade)

  @@unique([userId, accountId, coinId])
  @@index([userId])
  @@index([accountId])
  @@index([coinId])
  @@map("wallet_balances")
}
